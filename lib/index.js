"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Server_1 = require("./Server");
const express = require("express");
const path = require("path");
const app = express();
const port = parseInt(process.env.PORT, 10) || 8000;
var mysql = require('mysql');
var connection = mysql.createPool({
    host: 'birdie-test.cyosireearno.eu-west-2.rds.amazonaws.com',
    port: '3306',
    user: 'test-read',
    password: 'xnxPp6QfZbCYkY8',
    database: 'birdietest'
});
const sql = 'select *, str_to_date(timestamp, "%Y-%m-%dT%H:%i:%s") as time from birdietest.events order by time;';
app.set('port', port);
app.use(function (_req, res, next) {
    res.header("Access-Control-Allow-Origin", '*');
    res.header("Access-Control-Allow-Headers", 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    res.header("Access-Control-Allow-Methods", 'PUT, POST, GET, DELETE, OPTIONS');
    next();
});
app.use(express.static(path.join(__dirname, 'build')));
app.get('/data', function (_req, res, _next) {
    connection.query(sql, function (err, result, _fields) {
        if (err)
            throw err;
        console.log("Sending data...");
        res.send({ data: result });
    });
});
app.get('/*', (_req, res) => {
    res.sendFile(path.join(__dirname, 'build', 'index.html'));
});
const server = new Server_1.Server(app);
server.start(port);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBa0M7QUFDbEMsbUNBQW1DO0FBQ25DLDZCQUE2QjtBQUU3QixNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUV0QixNQUFNLElBQUksR0FBVyxRQUFRLENBQVMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFBO0FBRW5FLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUU1QixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0lBQ2hDLElBQUksRUFBRSxzREFBc0Q7SUFDNUQsSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsV0FBVztJQUNqQixRQUFRLEVBQUUsaUJBQWlCO0lBQzNCLFFBQVEsRUFBRSxZQUFZO0NBQ3ZCLENBQUMsQ0FBQTtBQUVGLE1BQU0sR0FBRyxHQUFHLHFHQUFxRyxDQUFBO0FBRWpILEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO0FBRXJCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFDL0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvQyxHQUFHLENBQUMsTUFBTSxDQUFDLDhCQUE4QixFQUFFLCtEQUErRCxDQUFDLENBQUM7SUFDNUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO0lBQzlFLElBQUksRUFBRSxDQUFDO0FBQ1QsQ0FBQyxDQUFDLENBQUE7QUFFRixHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBRXRELEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBUyxFQUFFLEdBQVEsRUFBRSxLQUFVO0lBQ3hELFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFVBQVUsR0FBUSxFQUFFLE1BQVcsRUFBRSxPQUFZO1FBQ2pFLElBQUksR0FBRztZQUFFLE1BQU0sR0FBRyxDQUFBO1FBRWxCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUE7SUFDNUIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQzFCLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDNUQsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VydmVyIH0gZnJvbSAnLi9TZXJ2ZXInO1xyXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5cclxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xyXG5cclxuY29uc3QgcG9ydDogbnVtYmVyID0gcGFyc2VJbnQoPHN0cmluZz5wcm9jZXNzLmVudi5QT1JULCAxMCkgfHwgODAwMFxyXG5cclxudmFyIG15c3FsID0gcmVxdWlyZSgnbXlzcWwnKVxyXG5cclxudmFyIGNvbm5lY3Rpb24gPSBteXNxbC5jcmVhdGVQb29sKHtcclxuICBob3N0OiAnYmlyZGllLXRlc3QuY3lvc2lyZWVhcm5vLmV1LXdlc3QtMi5yZHMuYW1hem9uYXdzLmNvbScsXHJcbiAgcG9ydDogJzMzMDYnLFxyXG4gIHVzZXI6ICd0ZXN0LXJlYWQnLFxyXG4gIHBhc3N3b3JkOiAneG54UHA2UWZaYkNZa1k4JyxcclxuICBkYXRhYmFzZTogJ2JpcmRpZXRlc3QnXHJcbn0pXHJcblxyXG5jb25zdCBzcWwgPSAnc2VsZWN0ICosIHN0cl90b19kYXRlKHRpbWVzdGFtcCwgXCIlWS0lbS0lZFQlSDolaTolc1wiKSBhcyB0aW1lIGZyb20gYmlyZGlldGVzdC5ldmVudHMgb3JkZXIgYnkgdGltZTsnXHJcblxyXG5hcHAuc2V0KCdwb3J0JywgcG9ydClcclxuXHJcbmFwcC51c2UoZnVuY3Rpb24gKF9yZXEsIHJlcywgbmV4dCkge1xyXG4gIHJlcy5oZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgJyonKTtcclxuICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiLCAnT3JpZ2luLCBYLVJlcXVlc3RlZC1XaXRoLCBDb250ZW50LVR5cGUsIEFjY2VwdCwgQXV0aG9yaXphdGlvbicpO1xyXG4gIHJlcy5oZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCIsICdQVVQsIFBPU1QsIEdFVCwgREVMRVRFLCBPUFRJT05TJyk7XHJcbiAgbmV4dCgpO1xyXG59KVxyXG5cclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnYnVpbGQnKSkpXHJcblxyXG5hcHAuZ2V0KCcvZGF0YScsIGZ1bmN0aW9uIChfcmVxOiBhbnksIHJlczogYW55LCBfbmV4dDogYW55KSB7XHJcbiAgY29ubmVjdGlvbi5xdWVyeShzcWwsIGZ1bmN0aW9uIChlcnI6IGFueSwgcmVzdWx0OiBhbnksIF9maWVsZHM6IGFueSkge1xyXG4gICAgaWYgKGVycikgdGhyb3cgZXJyXHJcbiAgICAvLyBjb25zdCBqc29uRGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIlNlbmRpbmcgZGF0YS4uLlwiKTtcclxuICAgIHJlcy5zZW5kKHsgZGF0YTogcmVzdWx0IH0pXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuYXBwLmdldCgnLyonLCAoX3JlcSwgcmVzKSA9PiB7XHJcbiAgcmVzLnNlbmRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICdidWlsZCcsICdpbmRleC5odG1sJykpO1xyXG59KTtcclxuXHJcbmNvbnN0IHNlcnZlciA9IG5ldyBTZXJ2ZXIoYXBwKTtcclxuc2VydmVyLnN0YXJ0KHBvcnQpXHJcbiJdfQ==